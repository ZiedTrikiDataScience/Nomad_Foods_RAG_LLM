trigger:
  branches:
    include:
      - main  # Trigger on pushes to main branch

variables:
  azureSubscription: 'azure-devops-ci-cd-nomad-rag'  # Set this up in the portal
  acrName: 'acr-sp'  # Your ACR SP name
  containerRegistry: 'ragnomadacr.azurecr.io'  # Your ACR server
  imageName: 'ziedtrikimlops/rag-chatbot-nomad-food'
  containerGroupName: 'rag-chatbot-nomad'   # Your ACI container group name
  containerInstanceName: 'rag-chatbot-nomad'  # Name for your container instance

stages:
  - stage: Build
    jobs:
      - job: BuildAndPush
        pool:
          name: local

        variables:
          RunAsAdmin: 'true'      

        steps:
          # Step 1: Login to ACR
          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: $(acrName)

          # Step 2: Build and Push the image :
          - task: Docker@2
            displayName: Building the new Docker image and Pushing it to ACR
            inputs:
              command: buildAndPush
              repository: $(containerRegistry)/$(imageName)
              dockerfile: Dockerfile
              tags: |
                $(Build.BuildId)

          - script: echo "Docker image successefully built and pushed to ACR."



  - stage: Deploy
    jobs:
      - job: DeployToACI
        pool:
          name: local

        variables:
          RunAsAdmin: 'true' 

        steps:
          # Step 1: Login to Azure (using service connection to Azure)
          - task: AzureCLI@2
            displayName: 'Azure CLI Login'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az login --identity

          # Step 2: Deploy Docker container to ACI
          - task: AzureCLI@2
            displayName: 'Deploy Docker container to ACI'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az container create \
                  --resource-group $(resourceGroup) \
                  --name $(containerGroupName) \
                  --image $(containerRegistry)/$(imageName):$(Build.BuildId) \
                  --cpu 2 \
                  --memory 4.0 \
                  --ports 8501 \
                  --environment-variables MISTRAL_API_KEY=$(MISTRAL_API_KEY) \
                  --registry-login-server $(containerRegistry) \
                  --registry-username $(acrName) \
                  --authentication-method aad \
                  --restart-policy OnFailure  # Or Always based on your need

                echo "Successefully Deployed Docker image to ACI "
           # Step 3: Retrieve public IP of the container instance and display the link
           
          - task: AzureCLI@2
            displayName: 'Get ACI public IP and display app link'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Get the public IP address of the ACI container instance
                PUBLIC_IP=$(az container show \
                  --resource-group $(resourceGroup) \
                  --name $(containerGroupName) \
                  --query "ipAddress.ip" \
                  --output tsv)
                
                # Construct the URL for accessing the app
                APP_URL="http://$PUBLIC_IP:8501"
                
                # Output the URL
                echo "Successfully Deployed Docker image to ACI. Check it out at $APP_URL"
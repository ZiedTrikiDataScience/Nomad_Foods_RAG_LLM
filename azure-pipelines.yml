trigger:
  branches:
    include:
      - main  # Trigger on pushes to main branch

variables:
  azureSubscription: 'azure-devops-ci-cd-nomad-rag'  # Set this up in the portal
  acrName: 'acr-sp'  # Your ACR SP name
  containerRegistry: 'ragnomadacr.azurecr.io'  # Your ACR server
  imageName: 'ziedtrikimlops/rag-chatbot-nomad-food'
  containerGroupName: 'rag-chatbot-nomad'   # Your ACI container group name
  containerInstanceName: 'rag-chatbot-nomad'  # Name for your container instance
  resourceGroup: 'RAGNomadResourceGroup'

stages:
  - stage: Build
    jobs:
      - job: BuildAndPush
        pool:
          name: local

        variables:
          RunAsAdmin: 'true'      

        steps:
          # Step 1: Login to ACR
          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: $(acrName)

          # Step 2: Build and Push the image
          - task: Docker@2
            displayName: Building the new Docker image and Pushing it to ACR
            inputs:
              command: buildAndPush
              repository: $(containerRegistry)/$(imageName)
              dockerfile: Dockerfile
              tags: |
                $(Build.BuildId)

          - script: echo "Docker image successfully built and pushed to ACR."

  - stage: Deploy
    jobs:
      - job: DeployToACI
        pool:
          name: local

        variables:
          RunAsAdmin: 'true' 

        steps:
          - task: AzureCLI@2
            displayName: Azure CLI Login and Deployment
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps  # Use PowerShell
              scriptLocation: inlineScript
              inlineScript: |
                az container create `
                  --resource-group ${env:resourceGroup} `
                  --image ${env:containerRegistry}/${env:imageName}:${env:Build_BuildId} `
                  --cpu 2 `
                  --memory 4.0 `
                  --ports 8501 `
                  --environment-variables MISTRAL_API_KEY=${env:MISTRAL_API_KEY} `
                  --registry-login-server ${env:containerRegistry} `
                  --registry-username ${env:acrName} `
                  --authentication-method aad `
                  --restart-policy OnFailure
                $containerDetails = az container show `
                  --resource-group ${env:resourceGroup} `
                  --query "ipAddress.ip" `
                  --output tsv
                Write-Host "Successfully Deployed. Access it at http://$containerDetails:8501"
